{% extends "layout_fs.twig" %}

{% block title %}Le monde{% endblock title %}
       
{% block style %}

	    <link rel="stylesheet" href="{{ app.request.basepath }}/ol/ol.css" />
	    <link rel="stylesheet" href="{{ app.request.basepath }}/css/worldmap.css" />
        
		<style>		
		
		body {
 		   padding: 0;
    	   margin: 0;
		}
		html, body, #map {
    		height: 100vh;
    		width: 100vw;
		}


		</style>
{% endblock %}

{% block content %}
<div class="clearfix">
	<form class="form-inline">
      	<label>Action &nbsp;</label>
      	<select id="action_select">
       		<option value="none" selected>Voir</option>
       		{% if is_granted('ROLE_CARTOGRAPHE', app.user) %}
       		<option value="translate">Déplacer (labels, pictos)</option>
       		<option value="modifyLabel">Modifier labels</option>
       		<option value="modifyLabelRotation">Modifier angle labels</option>
       		<option value="modifyLine">Modifier tracés linéaires (caravane...)</option>
       		<option value="modifyPays">Modifier tracés pays</option>
       		<option value="modifyFiefs">Modifier tracés fiefs</option>
       		<option value="modifySea">Modifier zone maritime</option>
       		<option value="addVille">Ajouter pictos ville</option>
       		<option value="addCapitale">Ajouter pictos capitale</option>
       		<option value="addExplo">Ajouter pictos exploration</option>
       		<option value="addLabelVille">Ajouter un label ville</option>
       		<option value="addLabelCapitale">Ajouter un label capitale</option>
       		<option value="addLabelPoi">Ajouter un label POI</option>
       		<option value="addLabelRiviere">Ajouter un label rivière</option>
       		<option value="addLabelPasse">Ajouter un label passe, sente, gué...</option>
       		<option value="addLabelSea">Ajouter un label maritime</option>
       		<option value="addCaravane">Ajouter route commerciale</option>
       		<option value="addRiviere">Ajouter un tracé de rivière</option>
       		<option value="addLimPays">Ajouter une frontière pays</option>
       		<option value="addLimFief">Ajouter une frontière fief</option>
       		<option value="addSea">Ajouter une zone maritime</option>
       		<option value="addRiver">Ajouter un cours d'eau</option>
       		<option value="addLimSea">Ajouter une limite maritime</option>
       		{% endif %}
      	</select>     	
    </form>
	<div class="mapbox">
		<div id="map"></div>
	</div> 		
</div>
{% endblock %}

{% block javascript %}

<script src="{{ app.request.basepath }}/ol/ol.js"></script>
<script src="{{ app.request.basepath }}/js/app/util.js"></script>
<script src="{{ app.request.basepath }}/js/app/mapconfig.js"></script>

<script>
var Carte = {
    olMap: null,
    maxResolution: null,
    currentInteractions: [],

    createMap: function(mapName){
        var self = this;
        
        for (var i=0; i<Mapconfig.maps.length; i++) {
            if(Mapconfig.maps[i].name == mapName) {
                var config = Mapconfig.maps[i];
  
                var mapMaxX = Mapconfig.background.tilesX * Mapconfig.background.tileSize;
                var mapMaxY = Mapconfig.background.tilesY * Mapconfig.background.tileSize;
                var mapCenter = [mapMaxX / 2, mapMaxY / 2];//[1673, 7923]; //[4190, 9838];
                var lmproj = new ol.proj.Projection({
                    code: 'LMPROJ',
                    units: 'pixels',
                    extent: [0, 0, mapMaxX, mapMaxY]
                });

                self.maxResolution = mapMaxX / Mapconfig.background.tileSize;    // 16384 / 256 = 64
                var resolutions = [];
                for (var z = 0; z <= 6; z++) {
                    resolutions[z] = self.maxResolution / Math.pow(2, z); 					// 64, 32, 16, 8, 4, 2, 1 (7 niveaux)
                }

                this.olMap = new ol.Map({
                    target: 'map',
                    view: new ol.View({
                        projection: lmproj, 
                        zoom: 3, //config.maxZoom,
                        minZoom: config.minZoom,
                        maxZoom: config.maxZoom,
                        center: mapCenter, 
                        extent: lmproj.getExtent(),
                        enableRotation: false
                    })
                });

				// Ajout de la première couche = la plus au fond = la couche image vide
				// pour le moment on utilise toujours cette couche en fond mais je le mets dans un if pour plus tard au cas où
                if (config.useBackground) {
                    var backgroundLayer = new ol.layer.Tile({
                        source: new ol.source.TileImage({
                            tileUrlFunction: function(tileCoord, pixelRatio, projection) { 
                                var z = tileCoord[0];
                                var x = tileCoord[1];
                                var y = -tileCoord[2] - 1;
                                return '{{ app.request.basepath }}/' + Mapconfig.background.mapUrl +'/' + z + '/' + x + '/' + y + '.png';
                            },
                            projection: lmproj,
                            tileGrid: new ol.tilegrid.TileGrid({
                                origin: ol.extent.getTopLeft(lmproj.getExtent()),
                                resolutions: resolutions,
                                tileSize: Mapconfig.background.tileSize
                            }),
                        }),
                        extent: lmproj.getExtent()
                    }); 
                    this.olMap.addLayer(backgroundLayer);
                }
                
                // ensuite on crée une couche vecteur pour chaque type de données à afficher
                // dans l'ordre de la config (évite de devoir gérer un zIndex)
                $(config.layers).each(function(key, confLayer){
                    var lay = new ol.layer.Vector({
                        name: confLayer.layerName,
                        source: new ol.source.Vector({ features: new ol.Collection([]) })
                    });
                    lay.setProperties({	'geomTranslate': confLayer.geomInteractions.translate,
                    					'geomModify' : confLayer.geomInteractions.modify,
                    					'geomType' : confLayer.geomType });
                    self.olMap.addLayer(lay);
                    
                    // On crée le style par défaut pour les éléments de cette couche, tel que défini dans la config
                    // Le style dépend du type d'élément (toujours le même type pour une même couche)
                    var styleFunc = self.createStyleFunc(confLayer.geomType, confLayer.style.zooms, BddStyles[confLayer.style.styleName]);
                    lay.setStyle(styleFunc);
                    
                    // Enfin, on crée les features
                    // ici aussi les opérations dépendent du type de géométrie de la couche                    
                    $.ajax({
                        dataType: "json",
                        url: confLayer.source,
                        success: function(data) {
                            $(data).each(function(key, obj) {
                                if (obj.geom != null)
                                {	
                                    var parsedGeom = JSON.parse(obj.geom);		

                                    switch (confLayer.geomType) {
                                        case "Polygon": 
                                        	var coords = parsedGeom.coordinates;
                                            var newFeature = new ol.Feature({
                                                geometry: new ol.geom.Polygon(coords)
                                            });
                                            break;
                                        case "Label":
                                            var newFeature = new ol.Feature({
                                                geometry: new ol.geom.Point(parsedGeom.coordinates)
                                            });
                                            newFeature.texte = obj.texte;
                                            newFeature.angle = Util.toRadians(obj.rotation);
                                            break;
                                        case "Point":
                                            var newFeature = new ol.Feature({
                                                geometry: new ol.geom.Point(parsedGeom.coordinates)
                                            });
                                            break;
                                        case "LineString" :
                                            var newFeature = new ol.Feature({
                                                geometry: new ol.geom.LineString(parsedGeom.coordinates)
                                            });
                                            break;
                                        default:
                                            console.log("type de geometrie non traité");
                                            break;
                                    }
                                    newFeature.categ = obj.categ;
									newFeature.bddId = obj.id;
                                    Util.transform(newFeature.getGeometry(), 'EPSG:4326', 'LMPROJ');
                                    lay.getSource().addFeature(newFeature);
                                }
                        });
                    }
                    }).error(function() {
                        console.log("erreur chargement json");
                    });
                });
                break;
            }
        }
    },
    
	createStyleFunc : function(geomType, zooms, props) { 
		// A faire : gestion d'erreurs
		var self = this;
		var styleFunc;
		
		 switch(geomType){
            case "Label": 
                styleFunc = function(feat, reso){
                    var zoomLevel = Math.log2(self.maxResolution / reso);
                    if (zooms.indexOf(zoomLevel) == -1) { return null; } // si le zoom affiché n'est pas dans la liste des zooms de visibilité de la couche) on n'affiche rien                 
                    var found = props.zooms.indexOf(zoomLevel);
                                    
                    var txt = props.textTransformation === "toUpper" ? feat.texte.toUpperCase() : feat.texte; 
                    var lignes = txt.split('#');
                    var styles = [];
                    
                    if(found != -1) {                       
                        $(lignes).each(function(key, value) { 
                            if (key==0) {
                                styles.push(new ol.style.Style ({
                                    text: new ol.style.Text({ 
                                        font: props.fontWeight +' '+props.fontSize[found] +'px '+ props.fontFamily,
                                        text: value,
                                        stroke: new ol.style.Stroke ({ color: Util.hexToRgba(props.strokeColor, props.strokeOpacity), width: props.strokeWidth}),
                                        fill: new ol.style.Fill({ color: Util.hexToRgba(props.fillColor, props.fillOpacity) }),
                                        rotation: feat.angle
                                    })
                                }));
                            } else {
                                styles.push(new ol.style.Style ({
                                    text: new ol.style.Text({ 
                                        font: props.fontWeight +' '+props.fontSize[found] +'px '+ props.fontFamily,
                                        text: value,
                                        stroke: new ol.style.Stroke ({ color: Util.hexToRgba(props.strokeColor, props.strokeOpacity), width: props.strokeWidth}),
                                        fill: new ol.style.Fill({ color: Util.hexToRgba(props.fillColor, props.fillOpacity) }),
                                        rotation: feat.angle
                                    }),
                                    geometry: function(feature) {
                                            // on crée un point d'ancrage décalé de x pixels (dans la config) pour les lignes suivantes
                                            var coordinates = feature.getGeometry().getCoordinates();
                                            coordinates[1] = coordinates[1] - props.interligne *key;
                                            return new ol.geom.Point(coordinates);
                                        }
                                    }) 
                                );
                            }
                        });
                        if (lignes.length==1) { return styles[0]; } else { return styles; }
                    }
                    else return null;
                };
                break;
            case "Polygon":
                styleFunc = function(feat, reso){
                    var zoomLevel = Math.log2(self.maxResolution / reso);
 					if (zooms.indexOf(zoomLevel) == -1) { return null; }
                    var found = props.zooms.indexOf(zoomLevel);
                    if(found != -1) {
                    	// on peut afficher soit le contour, soit l'intérieur, soit les deux
                    	var leStyle = new ol.style.Style();                   	
                    	if (props.fillColor !== undefined) { 
                    		leStyle.setFill(new ol.style.Fill({ color: Util.hexToRgba(props.fillColor, props.fillOpacity) })); 
                    	}
                    	if (props.strokeColor !== undefined) {
                    		leStyle.setStroke (new ol.style.Stroke ({ 
                                color: Util.hexToRgba(props.strokeColor, props.strokeOpacity),
                                width: props.strokeWidth[found] }));
                    	}
                    	 if (props.strokeDashArray !== undefined) { leStyle.getStroke().setLineDash(props.strokeDashArray[found]);}
                        if (props.strokeCap !== undefined) {leStyle.getStroke().setLineCap(props.strokeCap);}
                    	return leStyle;
                    } 
                    else return null;
                };
                break;
            case "Point":
                styleFunc = function(feat, reso) {
                    var zoomLevel = Math.log2(self.maxResolution / reso);
					if (zooms.indexOf(zoomLevel) == -1) { return null; }
                    var found = props.zooms.indexOf(zoomLevel);
                    if(found != -1) {
                        // on regarde quel type d'image on a
                        var imgStyle = null; 
                        switch (props.imgSrc) {
                            case 'cercle' :
                                imgStyle = new ol.style.Circle({
                                    radius : props.pointRadius[found],
                                    fill : new ol.style.Fill ({color: Util.hexToRgba(props.fillColor, props.fillOpacity) })
                                });
                            break;
                            default :
                                imgStyle = new ol.style.Icon({
                                    //size: [props.imgHeight[found], props.imgWidth[found]],
                                    src: '{{ app.request.basepath }}/' + props.imgSrc,
                                    scale: props.scale[found]
                                });
                        }
                        return new ol.style.Style ({
                            image: imgStyle
                        });
                    } 
                    else return null;
                };
                break;
            case "LineString":
                styleFunc = function(feat, reso){
                    var zoomLevel = Math.log2(self.maxResolution / reso);
                    if (zooms.indexOf(zoomLevel) == -1) { return null; }
                    var found = props.zooms.indexOf(zoomLevel);
                    if(found != -1) {
                        var lineStyle = new ol.style.Style ({
                            stroke: new ol.style.Stroke ({ 
                                color: Util.hexToRgba(props.strokeColor, props.strokeOpacity),
                                width: props.strokeWidth[found]
                            })
                        });
                        if (props.strokeDashArray !== undefined) { lineStyle.getStroke().setLineDash(props.strokeDashArray[found]);}
                        if (props.strokeCap !== undefined) {lineStyle.getStroke().setLineCap(props.strokeCap);}
                        return lineStyle;
                    } 
                    else return null;
                }; 
                break;
            default:
                console.log("erreur, type de géométrie non géré");
        } 
        return styleFunc;	
	},
    
    removeAllInteractions: function() { 
    	if (this.currentInteractions.length > 0) {
	    	while(this.currentInteractions.length > 0) {
	    		this.olMap.removeInteraction(this.currentInteractions.pop());
	    	}
    	}	
    },
       
    initTranslateInteraction : function () { 
        var self = this;
        var translate = new ol.interaction.Translate({ 
                layers: function(layer) {	                
            		if (layer.get('geomTranslate')!== undefined) {
            			return layer.get('geomTranslate');
            		} else return false;
            	},
                hitTolerance: 5
        });
        self.olMap.addInteraction(translate);
        self.currentInteractions.push(translate);
        
        translate.on('translateend', function (e) { 
            var newGeom = e.features.getArray()[0].getGeometry().clone();
            Util.transform(newGeom, 'LMPROJ', 'EPSG:4326');
            var convert = new ol.format.GeoJSON;
            var geojson = convert.writeGeometry(newGeom);
            
			var bddId = e.features.getArray()[0].bddId;
			var categ = e.features.getArray()[0].categ;
            
            $.ajax({
                type: "POST",
                dataType: 'json',
                url: "worldmap/features/update",
                data: {geom: geojson, id: bddId, categ: categ},
                success: function(data) {
                	console.log(data);
                    //alert("la geographie a été enregistrée");
                }
            }).error(function() {
                alert("désolé, une erreur est survenue");
            });
        });       
    },
            
    initModifyLabelInteraction: function() {
    	var self = this;
    	
    	var select = new ol.interaction.Select({
    		layers: function(layer) { 
        		if (layer.get('geomModify')!== undefined && layer.get('geomType')=='Label') { 
        			return layer.get('geomModify');  
        		} else return false;
        	}
        	// A FAIRE : empêcher la sélection multiple
    	});
    	self.olMap.addInteraction(select);
    	self.currentInteractions.push(select);
    	
    	select.on('select', function(e) { // l'event est appelé au moment de la sélection et de la déselection 
    		// au moment de la sélection on affiche un dialogue pour saisir le nouveau label
    		if (e.selected.length > 0) { 
				var reponse = prompt("Utilisez # pour un retour à la ligne", e.selected[0].texte);
				if (reponse != null && reponse != '') { 
					$.ajax({
		                type: "POST",
		                dataType: 'json',
 		                url: "worldmap/features/update",
		                data: {texte: reponse, id: e.selected[0].bddId, categ: e.selected[0].categ},
		                success: function(data) {
		                	e.selected[0].texte = reponse;
		                	console.log(data);
		                    //alert("la geographie a été enregistrée");
		                }
		            }).error(function() {
		                alert("désolé, une erreur est survenue");
		            });
				}
			}
			
			// au moment de las déselection, on force le recalcul du style de la feature modifiée
			if (e.deselected.length > 0) {
				e.deselected[0].changed();
			}

    	});
    },
    
    initModifyLabelRotationInteraction: function() {
    	var self = this;
    	
    	var select = new ol.interaction.Select({
    		layers: function(layer) { 
        		if (layer.get('geomModify')!== undefined && layer.get('geomType')=='Label') { 
        			return layer.get('geomModify');  
        		} else return false;
        	}
        	// A FAIRE : empêcher la sélection multiple
    	});
    	self.olMap.addInteraction(select);
    	self.currentInteractions.push(select);
    	
    	select.on('select', function(e) { // l'event est appelé au moment de la sélection et de la déselection 
    		// au moment de la sélection on affiche un dialogue pour saisir le nouveau label
    		if (e.selected.length > 0) { 
				var reponse = prompt("angle en degrés", Math.round(Util.toDegrees(e.selected[0].angle)));
				if (reponse != null && reponse != '') { 
				
					$.ajax({
		                type: "POST",
		                dataType: 'json',
 		                url: "worldmap/features/update",
		                data: {rotation: reponse, id: e.selected[0].bddId, categ: e.selected[0].categ},
		                success: function(data) {
		                	e.selected[0].angle = Util.toRadians(reponse);
		                	console.log(data);
		                    //alert("la geographie a été enregistrée");
		                }
		            }).error(function() {
		                alert("désolé, une erreur est survenue");
		            });
				}
			}
			
			// au moment de las déselection, on force le recalcul du style de la feature modifiée
			if (e.deselected.length > 0) {
				e.deselected[0].changed();
			}

    	});
    },
    
    initModifyInteraction: function(geomType, categ) {
        var self = this;
        var featureId, featureRevision;
        
		// Avant de pouvoir modify une feature il faut la sélectionner 
		var select = new ol.interaction.Select({
    		layers: function(layer) { 
        		if (layer.get('geomModify')!== undefined && (layer.get('geomType')===geomType)) { 
        			if (geomType==='Polygon') { // pour les polygones on ne peutt modifier qu'une categ à la fois, puor éviter les pb de sélection de feature superposées
        				if (layer.get('name') !== categ) {
        					return false;
    					}
        			}
        			return layer.get('geomModify');  
        		} else return false;
        	}
    	});
    	self.olMap.addInteraction(select);
    	self.currentInteractions.push(select);
    	
        var modify = new ol.interaction.Modify({
            features: select.getFeatures(),
            deleteCondition: function(event) {
            return ol.events.condition.shiftKeyOnly(event) &&
                ol.events.condition.singleClick(event);
            }
        });
        self.olMap.addInteraction(modify);
    	self.currentInteractions.push(modify);
    	
        select.on('select', function (e) {  	
        	if (e.deselected.length > 0) {
        		var newGeom = e.deselected[0].getGeometry().clone();
		        Util.transform(newGeom, 'LMPROJ', 'EPSG:4326');
		        var convert = new ol.format.GeoJSON;
		        var geojson = convert.writeGeometry(newGeom);
		        /*
		        if (e.deselected[0].categ ==='fief') { // les territoires sont formatés un peu différemment pour l'instant (tant que la page /world est utilisée)
		        	geojson = '{"type":"Feature","properties":{},"geometry":' + geojson + '}';
	        	}
*/
        		$.ajax({
	                type: "POST",
	                dataType: 'json',
	                url: "worldmap/features/update",
	                data: {id: e.deselected[0].bddId, categ: e.deselected[0].categ, geom: geojson},
	                success: function(data) {
	                	console.log(data);
	                    //alert("la geographie a été enregistrée");
	                }
	            }).error(function(err) {
	                console.log(err); //alert("désolé, une erreur est survenue");
	            });
        	}
        });
    },
    
    initDrawInteraction : function(geomType, categ) {
    	var destinationLayer = null;
		this.olMap.getLayers().forEach( function(elem, index, tab) {
			if(elem.getProperties()['name']===categ) {
			destinationLayer = elem; } });
  	
        var drawInt = new ol.interaction.Draw({ 
                source: destinationLayer.getSource(), // où seront placées les features créées
                type: geomType,
                style: this.createStyleFunc(geomType, DefaultStyleProperties.zooms, DefaultStyleProperties) // style pour le dessin, disparait quand la feature est ajoutée à sa source de destination
        });  
        this.olMap.addInteraction(drawInt);
        this.currentInteractions.push(drawInt);
        
        drawInt.setProperties({'categ' : categ});
        
        drawInt.on('drawend', function(e) {
            var newGeom = e.feature.getGeometry().clone();
            Util.transform(newGeom, 'LMPROJ', 'EPSG:4326');
            var convert = new ol.format.GeoJSON;
            var geojson = convert.writeGeometry(newGeom);
            	
			const words = categ.split('_');
			if (words[0] === 'label') {
				var reponse = prompt("Saisissez le texte à afficher : ");
				e.feature.texte = reponse;	
				e.feature.angle = 0;
				var datas = {categ: this.getProperties()['categ'], geom:geojson, texte:reponse};//				datas.texte = reponse;
	            var str = "INSERT INTO geo_label (categ, geojson, texte) VALUES ('" + categ + "','" + geojson + "','" + reponse + "');";				
			} else {
				var datas = {categ: this.getProperties()['categ'], geom:geojson}
				var table = {'ville':'geo_picto', 'capitale':'geo_picto','caravane':'geo_ligne', 'exploration':'geo_picto', 'lim_pays':'geo_ligne', 'lim_fief':'geo_ligne'
							,'zonedeau':'geo_surf', 'coursdeau':'geo_ligne', 'lim_sea':'geo_ligne'};
	            var str = "INSERT INTO " + table[categ] + "(categ, geojson) VALUES ('" + categ + "','" + geojson + "');";
			}
			e.feature.categ = categ;			

            $.ajax({
                type: "POST",
                dataType: 'json',
                url: "worldmap/features/add",
                data: datas,
                success: function(data) {
                	e.feature.bddId = data.id;
                }
            }).error(function(err) {
                console.log(err); //alert("désolé, une erreur est survenue");
            });
            
          
			console.log(str);
        }, drawInt);

		

    },      
    
    /*
    showCountriesColors : function (show) { // affichage des pays en couleur transparente comme sur la prod, pour voir le rendu uniquement ---- juste pour mon dev ----
        
        if (show) {
            var lay = new ol.layer.Vector({
                name: "surcouche",
                source: new ol.source.Vector({ features: new ol.Collection([]) })
            });
            this.olMap.addLayer(lay);
            
            $.ajax({
                dataType: "json",
                url: "world/countriesjson",
                success: function(data) {
                    $(data).each(function(key, obj) {
                        if (obj.geom != null)
                        {	
                            var parsedGeom = JSON.parse(obj.geom);		
                            $(parsedGeom.geometry.coordinates[0]).each(function(toto, coords) {
                                Util.LonLatToLM(coords);
                            });
                            var newFeature = new ol.Feature({
                                geometry: new ol.geom.Polygon(parsedGeom.geometry.coordinates)
                            });
                            var style = new ol.style.Style({
                                fill: new ol.style.Fill({ color: Util.hexToRgba(obj.color, 0.2) })
                            });
                            newFeature.setStyle(style);
                            lay.getSource().addFeature(newFeature);
                        }
                });
            }
            }).error(function() {
                console.log("erreur chargement json");
            });
            
        }
    },
*/
    
};

//Carte.createMap("baseMap");
Carte.createMap("magnaCarta");
//Carte.showCountriesColors(true); // pour afficher la surcouche des pays en couleur

// Cette fonctione me sers uniquement pour le dev, pour créer des objets sans avoir à créer les routes, etc...
Carte.olMap.on('click', function(e) { //console.log(e.coordinate);
    var newPoint = new ol.geom.Point(e.coordinate);
    Util.transform(newPoint, 'LMPROJ', 'EPSG:4326');
    var convert = new ol.format.GeoJSON;
    var geojson = convert.writeGeometry(newPoint);
    
//    var str = "INSERT INTO geo_picto (`type`, geojson, url, rotation) VALUES ('exploration', '" + geojson +"', 'img/pictos/exploration.svg', 0);";
//  var str = "INSERT INTO geo_picto (`type`, geojson, url, rotation) VALUES ('ville', '" + geojson +"', 'cercle', 0);" ;
console.log(geojson);
    //console.log(str);
});


var actionSelect = document.getElementById('action_select');

actionSelect.onchange = function() {	
	Carte.removeAllInteractions();
	
	switch(actionSelect.value) {
		case "translate" :
			Carte.initTranslateInteraction(); break;
		case "modifyLabel" :
			Carte.initModifyLabelInteraction(); break;	
		case "modifyLabelRotation" :
			Carte.initModifyLabelRotationInteraction(); break;	
		case "modifyLine" : 
			Carte.initModifyInteraction('LineString','all'); break;
		case "modifyPays" : 
			Carte.initModifyInteraction('Polygon','pays'); break;
		case "modifyFiefs" : 
			Carte.initModifyInteraction('Polygon','fief'); break;
		case "modifySea" :
			Carte.initModifyInteraction('Polygon','zonedeau'); break;
		case "addVille" :
			Carte.initDrawInteraction('Point','ville'); break;
		case "addCapitale" :
			Carte.initDrawInteraction('Point','capitale'); break;
		case "addExplo" :
			Carte.initDrawInteraction('Point','exploration'); break;
		case "addLabelPoi" : 
			Carte.initDrawInteraction('Point','label_poi'); break;
		case "addLabelVille" :
			Carte.initDrawInteraction('Point','label_ville'); break;
		case "addLabelCapitale" :
			Carte.initDrawInteraction('Point','label_capitale'); break;
		case "addLabelRiviere" :
			Carte.initDrawInteraction('Point','label_riviere'); break;
		case "addLabelPasse" :
			Carte.initDrawInteraction('Point','label_passe'); break;
		case "addLabelSea":
			Carte.initDrawInteraction('Point','label_sea'); break;
		case "addCaravane" :
			Carte.initDrawInteraction('LineString','caravane'); break;
		case "addRiviere" :
			Carte.initDrawInteraction('LineString','riviere'); break;
		case "addLimPays" :
			Carte.initDrawInteraction('LineString','lim_pays'); break;
		case "addLimFief" :
			Carte.initDrawInteraction('LineString','lim_fief'); break;
		case "addSea" :
			Carte.initDrawInteraction('Polygon','zonedeau'); break;
		case "addRiver" :
			Carte.initDrawInteraction('LineString','coursdeau'); break;
		case "addLimSea" :
			Carte.initDrawInteraction('LineString','lim_sea'); break;
	}
};

</script>

{% endblock %}
